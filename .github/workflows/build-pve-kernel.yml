name: Build Custom Proxmox VE Kernel

on:
  # 允许您在 GitHub Actions UI 上手动触发此工作流
  workflow_dispatch:

jobs:
  build-kernel:
    runs-on: ubuntu-latest
    steps:
      - name: 1. Checkout a repo to store the artifacts
        uses: actions/checkout@v4

      - name: 2. Install Build Dependencies
        run: |
          sudo apt-get update
          # 安装基础编译工具和内核编译所需的特定库
          # build-essential: 包含 make, gcc, g++ 等基础编译工具链
          # git: 用于克隆源码
          # fakeroot: 允许在没有 root 权限的情况下创建 .deb 包
          # cpio, bc, kmod, libssl-dev, libelf-dev, bison, flex, dwarves: Linux 内核编译所需的各种依赖项
          sudo apt-get install -y --no-install-recommends \
            git build-essential fakeroot cpio bc kmod libssl-dev libelf-dev bison flex dwarves

      - name: 3. Clone Latest PVE Kernel Source
        run: |
          # 从 Proxmox 官方 git 源克隆 master 分支
          # master 分支代表了最新的开发版本
          # --depth 1 只克隆最新的一次提交，以节省时间和空间
          git clone --depth 1 --branch master git://git.proxmox.com/git/pve-kernel.git
          cd pve-kernel
          echo "PVE kernel source cloned successfully."

      - name: 4. Prepare Kernel Configuration
        working-directory: ./pve-kernel
        run: |
          # 复制 Proxmox 官方的 amd64 配置文件作为我们编译的基础
          # 这是确保内核与 PVE 兼容的关键一步
          echo "Copying Proxmox default config..."
          cp proxmox/config-amd64 .config

          # 添加一个自定义的版本字符串，以便轻松识别我们自己编译的内核
          # ${{ github.run_number }} 是 GitHub Actions 提供的内置变量，代表工作流的运行次数
          echo "CONFIG_LOCALVERSION=\"-custom-${{ github.run_number }}\"" >> .config
          echo "Custom version string added."

          # 运行 olddefconfig 以根据当前源码更新配置，并为任何新选项设置默认值
          # 这可以确保 .config 文件是完整且有效的
          echo "Updating config with 'make olddefconfig'..."
          make olddefconfig

      - name: 5. Compile Kernel into Debian Packages
        working-directory: ./pve-kernel
        run: |
          # 使用所有可用的 CPU 核心 (-j$(nproc)) 来加速编译
          # 'deb-pkg' 是一个 make 目标，它会自动完成编译并打包成 .deb 文件
          echo "Starting kernel compilation. This will take a long time..."
          make -j$(nproc) deb-pkg

      - name: 6. Organize and List Artifacts
        run: |
          echo "Compilation finished. Organizing .deb packages..."
          # 编译生成的 .deb 文件位于 pve-kernel 目录的上一级
          mkdir -p ./kernel-artifacts
          mv ./*.deb ./kernel-artifacts/
          
          echo "Generated kernel packages:"
          ls -lh ./kernel-artifacts/

      - name: 7. Upload Kernel Packages as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: pve-kernel-debs
          path: ./kernel-artifacts/
          retention-days: 7 # 将构件保留7天
